// Generated by rstantools.  Do not edit by hand.

/*
    baseqtl is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    baseqtl is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with baseqtl.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_paired_GT_nb_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_paired_GT_nb");
    reader.add_event(105, 103, "end", "model_paired_GT_nb");
    return reader;
}
#include <stan_meta_header.hpp>
class model_paired_GT_nb
  : public stan::model::model_base_crtp<model_paired_GT_nb> {
private:
        int N;
        int K;
        int k;
        std::vector<std::vector<int> > Y;
        std::vector<int> g;
        matrix_d cov;
        vector_d aveP;
        vector_d sdP;
        vector_d mixP;
public:
    model_paired_GT_nb(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_paired_GT_nb(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_paired_GT_nb_namespace::model_paired_GT_nb";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "k", "int", context__.to_vec());
            k = int(0);
            vals_i__ = context__.vals_i("k");
            pos__ = 0;
            k = vals_i__[pos__++];
            check_greater_or_equal(function__, "k", k, 0);
            current_statement_begin__ = 8;
            validate_non_negative_index("Y", "N", N);
            validate_non_negative_index("Y", "2", 2);
            context__.validate_dims("data initialization", "Y", "int", context__.to_vec(N,2));
            Y = std::vector<std::vector<int> >(N, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("Y");
            pos__ = 0;
            size_t Y_k_0_max__ = N;
            size_t Y_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < Y_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Y_k_0_max__; ++k_0__) {
                    Y[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("g", "N", N);
            context__.validate_dims("data initialization", "g", "int", context__.to_vec(N));
            g = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("g");
            pos__ = 0;
            size_t g_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < g_k_0_max__; ++k_0__) {
                g[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("cov", "N", N);
            validate_non_negative_index("cov", "(1 + K)", (1 + K));
            context__.validate_dims("data initialization", "cov", "matrix_d", context__.to_vec(N,(1 + K)));
            cov = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, (1 + K));
            vals_r__ = context__.vals_r("cov");
            pos__ = 0;
            size_t cov_j_2_max__ = (1 + K);
            size_t cov_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < cov_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < cov_j_1_max__; ++j_1__) {
                    cov(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("aveP", "k", k);
            context__.validate_dims("data initialization", "aveP", "vector_d", context__.to_vec(k));
            aveP = Eigen::Matrix<double, Eigen::Dynamic, 1>(k);
            vals_r__ = context__.vals_r("aveP");
            pos__ = 0;
            size_t aveP_j_1_max__ = k;
            for (size_t j_1__ = 0; j_1__ < aveP_j_1_max__; ++j_1__) {
                aveP(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("sdP", "k", k);
            context__.validate_dims("data initialization", "sdP", "vector_d", context__.to_vec(k));
            sdP = Eigen::Matrix<double, Eigen::Dynamic, 1>(k);
            vals_r__ = context__.vals_r("sdP");
            pos__ = 0;
            size_t sdP_j_1_max__ = k;
            for (size_t j_1__ = 0; j_1__ < sdP_j_1_max__; ++j_1__) {
                sdP(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("mixP", "k", k);
            context__.validate_dims("data initialization", "mixP", "vector_d", context__.to_vec(k));
            mixP = Eigen::Matrix<double, Eigen::Dynamic, 1>(k);
            vals_r__ = context__.vals_r("mixP");
            pos__ = 0;
            size_t mixP_j_1_max__ = k;
            for (size_t j_1__ = 0; j_1__ < mixP_j_1_max__; ++j_1__) {
                mixP(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 20;
            num_params_r__ += 1;
            current_statement_begin__ = 21;
            num_params_r__ += 1;
            current_statement_begin__ = 22;
            num_params_r__ += 1;
            current_statement_begin__ = 23;
            num_params_r__ += 1;
            current_statement_begin__ = 24;
            num_params_r__ += 1;
            current_statement_begin__ = 25;
            validate_non_negative_index("betas", "(K - 1)", (K - 1));
            num_params_r__ += (K - 1);
            current_statement_begin__ = 26;
            validate_non_negative_index("ui", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 27;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_paired_GT_nb() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 20;
        if (!(context__.contains_r("anorm")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable anorm missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("anorm");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "anorm", "double", context__.to_vec());
        double anorm(0);
        anorm = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(anorm);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable anorm: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 21;
        if (!(context__.contains_r("apso")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable apso missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("apso");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "apso", "double", context__.to_vec());
        double apso(0);
        apso = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(apso);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable apso: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 22;
        if (!(context__.contains_r("ba")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ba missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ba");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "ba", "double", context__.to_vec());
        double ba(0);
        ba = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(ba);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ba: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 23;
        if (!(context__.contains_r("bd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable bd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("bd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "bd", "double", context__.to_vec());
        double bd(0);
        bd = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(bd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable bd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 24;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 25;
        if (!(context__.contains_r("betas")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable betas missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("betas");
        pos__ = 0U;
        validate_non_negative_index("betas", "(K - 1)", (K - 1));
        context__.validate_dims("parameter initialization", "betas", "vector_d", context__.to_vec((K - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> betas((K - 1));
        size_t betas_j_1_max__ = (K - 1);
        for (size_t j_1__ = 0; j_1__ < betas_j_1_max__; ++j_1__) {
            betas(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(betas);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable betas: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("ui")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ui missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ui");
        pos__ = 0U;
        validate_non_negative_index("ui", "N", N);
        context__.validate_dims("parameter initialization", "ui", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> ui(N);
        size_t ui_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < ui_j_1_max__; ++j_1__) {
            ui(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(ui);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ui: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("sdnb")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sdnb missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sdnb");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sdnb", "double", context__.to_vec());
        double sdnb(0);
        sdnb = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sdnb);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sdnb: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 20;
            local_scalar_t__ anorm;
            (void) anorm;  // dummy to suppress unused var warning
            if (jacobian__)
                anorm = in__.scalar_constrain(lp__);
            else
                anorm = in__.scalar_constrain();
            current_statement_begin__ = 21;
            local_scalar_t__ apso;
            (void) apso;  // dummy to suppress unused var warning
            if (jacobian__)
                apso = in__.scalar_constrain(lp__);
            else
                apso = in__.scalar_constrain();
            current_statement_begin__ = 22;
            local_scalar_t__ ba;
            (void) ba;  // dummy to suppress unused var warning
            if (jacobian__)
                ba = in__.scalar_constrain(lp__);
            else
                ba = in__.scalar_constrain();
            current_statement_begin__ = 23;
            local_scalar_t__ bd;
            (void) bd;  // dummy to suppress unused var warning
            if (jacobian__)
                bd = in__.scalar_constrain(lp__);
            else
                bd = in__.scalar_constrain();
            current_statement_begin__ = 24;
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_lb_constrain(0, lp__);
            else
                phi = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 25;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> betas;
            (void) betas;  // dummy to suppress unused var warning
            if (jacobian__)
                betas = in__.vector_constrain((K - 1), lp__);
            else
                betas = in__.vector_constrain((K - 1));
            current_statement_begin__ = 26;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ui;
            (void) ui;  // dummy to suppress unused var warning
            if (jacobian__)
                ui = in__.vector_constrain(N, lp__);
            else
                ui = in__.vector_constrain(N);
            current_statement_begin__ = 27;
            local_scalar_t__ sdnb;
            (void) sdnb;  // dummy to suppress unused var warning
            if (jacobian__)
                sdnb = in__.scalar_lb_constrain(0, lp__);
            else
                sdnb = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 32;
            local_scalar_t__ bp;
            (void) bp;  // dummy to suppress unused var warning
            stan::math::initialize(bp, DUMMY_VAR__);
            stan::math::fill(bp, DUMMY_VAR__);
            current_statement_begin__ = 33;
            local_scalar_t__ bn;
            (void) bn;  // dummy to suppress unused var warning
            stan::math::initialize(bn, DUMMY_VAR__);
            stan::math::fill(bn, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 35;
            stan::math::assign(bp, (ba + bd));
            current_statement_begin__ = 36;
            stan::math::assign(bn, (ba - bd));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 32;
            if (stan::math::is_uninitialized(bp)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: bp";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable bp: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 33;
            if (stan::math::is_uninitialized(bn)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: bn";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable bn: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            {
            current_statement_begin__ = 41;
            local_scalar_t__ lmu(DUMMY_VAR__);
            (void) lmu;  // dummy to suppress unused var warning
            stan::math::initialize(lmu, DUMMY_VAR__);
            stan::math::fill(lmu, DUMMY_VAR__);
            current_statement_begin__ = 42;
            validate_non_negative_index("lpsa", "k", k);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lpsa(k);
            stan::math::initialize(lpsa, DUMMY_VAR__);
            stan::math::fill(lpsa, DUMMY_VAR__);
            current_statement_begin__ = 43;
            validate_non_negative_index("lpsd", "k", k);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lpsd(k);
            stan::math::initialize(lpsd, DUMMY_VAR__);
            stan::math::fill(lpsd, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("betasN", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> betasN(K);
            stan::math::initialize(betasN, DUMMY_VAR__);
            stan::math::fill(betasN, DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("betasP", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> betasP(K);
            stan::math::initialize(betasP, DUMMY_VAR__);
            stan::math::fill(betasP, DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("lmuN", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lmuN(N);
            stan::math::initialize(lmuN, DUMMY_VAR__);
            stan::math::fill(lmuN, DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("lmuP", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lmuP(N);
            stan::math::initialize(lmuP, DUMMY_VAR__);
            stan::math::fill(lmuP, DUMMY_VAR__);
            current_statement_begin__ = 50;
            lp_accum__.add(gamma_log<propto__>(phi, 1, 0.1));
            current_statement_begin__ = 52;
            lp_accum__.add(normal_log<propto__>(anorm, 6, 4));
            current_statement_begin__ = 53;
            lp_accum__.add(normal_log<propto__>(apso, 6, 4));
            current_statement_begin__ = 54;
            for (int i = 1; i <= (K - 1); ++i) {
                current_statement_begin__ = 55;
                lp_accum__.add(cauchy_log<propto__>(get_base1(betas, i, "betas", 1), 0, 2.5));
            }
            current_statement_begin__ = 59;
            lp_accum__.add(normal_log<propto__>(ui, 0, sdnb));
            current_statement_begin__ = 60;
            lp_accum__.add(cauchy_log<propto__>(sdnb, 0, 1));
            current_statement_begin__ = 63;
            for (int i = 1; i <= k; ++i) {
                current_statement_begin__ = 64;
                stan::model::assign(lpsa, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (normal_log(ba, get_base1(aveP, i, "aveP", 1), get_base1(sdP, i, "sdP", 1)) + get_base1(mixP, i, "mixP", 1)), 
                            "assigning variable lpsa");
                current_statement_begin__ = 65;
                stan::model::assign(lpsd, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (normal_log(bd, get_base1(aveP, i, "aveP", 1), get_base1(sdP, i, "sdP", 1)) + get_base1(mixP, i, "mixP", 1)), 
                            "assigning variable lpsd");
            }
            current_statement_begin__ = 67;
            lp_accum__.add(log_sum_exp(lpsa));
            current_statement_begin__ = 68;
            lp_accum__.add(log_sum_exp(lpsd));
            current_statement_begin__ = 70;
            stan::math::assign(betasN, append_row(anorm, betas));
            current_statement_begin__ = 71;
            stan::math::assign(betasP, append_row(apso, betas));
            current_statement_begin__ = 72;
            stan::math::assign(lmuN, multiply(stan::model::rvalue(cov, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(2, cols(cov)), stan::model::nil_index_list())), "cov"), betasN));
            current_statement_begin__ = 73;
            stan::math::assign(lmuP, multiply(stan::model::rvalue(cov, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(2, cols(cov)), stan::model::nil_index_list())), "cov"), betasP));
            current_statement_begin__ = 75;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 78;
                for (int t = 1; t <= 2; ++t) {
                    current_statement_begin__ = 80;
                    if (as_bool(logical_eq(t, 1))) {
                        current_statement_begin__ = 82;
                        stan::math::assign(lmu, (get_base1(lmuP, i, "lmuP", 1) + get_base1(ui, i, "ui", 1)));
                        current_statement_begin__ = 83;
                        stan::math::assign(lmu, (logical_eq(stan::math::fabs(get_base1(g, i, "g", 1)), 1) ? stan::math::promote_scalar<local_scalar_t__>(((lmu + stan::math::log1p((1 + stan::math::exp(bp)))) - stan::math::log(2))) : stan::math::promote_scalar<local_scalar_t__>(lmu) ));
                        current_statement_begin__ = 84;
                        stan::math::assign(lmu, (logical_eq(get_base1(g, i, "g", 1), 2) ? stan::math::promote_scalar<local_scalar_t__>((lmu + bp)) : stan::math::promote_scalar<local_scalar_t__>(lmu) ));
                    } else {
                        current_statement_begin__ = 89;
                        stan::math::assign(lmu, (get_base1(lmuN, i, "lmuN", 1) + get_base1(ui, i, "ui", 1)));
                        current_statement_begin__ = 90;
                        stan::math::assign(lmu, (logical_eq(stan::math::fabs(get_base1(g, i, "g", 1)), 1) ? stan::math::promote_scalar<local_scalar_t__>(((lmu + stan::math::log1p((1 + stan::math::exp(bn)))) - stan::math::log(2))) : stan::math::promote_scalar<local_scalar_t__>(lmu) ));
                        current_statement_begin__ = 91;
                        stan::math::assign(lmu, (logical_eq(get_base1(g, i, "g", 1), 2) ? stan::math::promote_scalar<local_scalar_t__>((lmu + bn)) : stan::math::promote_scalar<local_scalar_t__>(lmu) ));
                    }
                    current_statement_begin__ = 94;
                    lp_accum__.add(neg_binomial_2_log(get_base1(Y, i, "Y", 1), stan::math::exp(lmu), phi));
                }
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("anorm");
        names__.push_back("apso");
        names__.push_back("ba");
        names__.push_back("bd");
        names__.push_back("phi");
        names__.push_back("betas");
        names__.push_back("ui");
        names__.push_back("sdnb");
        names__.push_back("bp");
        names__.push_back("bn");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_paired_GT_nb_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double anorm = in__.scalar_constrain();
        vars__.push_back(anorm);
        double apso = in__.scalar_constrain();
        vars__.push_back(apso);
        double ba = in__.scalar_constrain();
        vars__.push_back(ba);
        double bd = in__.scalar_constrain();
        vars__.push_back(bd);
        double phi = in__.scalar_lb_constrain(0);
        vars__.push_back(phi);
        Eigen::Matrix<double, Eigen::Dynamic, 1> betas = in__.vector_constrain((K - 1));
        size_t betas_j_1_max__ = (K - 1);
        for (size_t j_1__ = 0; j_1__ < betas_j_1_max__; ++j_1__) {
            vars__.push_back(betas(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> ui = in__.vector_constrain(N);
        size_t ui_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < ui_j_1_max__; ++j_1__) {
            vars__.push_back(ui(j_1__));
        }
        double sdnb = in__.scalar_lb_constrain(0);
        vars__.push_back(sdnb);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 32;
            double bp;
            (void) bp;  // dummy to suppress unused var warning
            stan::math::initialize(bp, DUMMY_VAR__);
            stan::math::fill(bp, DUMMY_VAR__);
            current_statement_begin__ = 33;
            double bn;
            (void) bn;  // dummy to suppress unused var warning
            stan::math::initialize(bn, DUMMY_VAR__);
            stan::math::fill(bn, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 35;
            stan::math::assign(bp, (ba + bd));
            current_statement_begin__ = 36;
            stan::math::assign(bn, (ba - bd));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(bp);
                vars__.push_back(bn);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_paired_GT_nb";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "anorm";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "apso";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ba";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "bd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        size_t betas_j_1_max__ = (K - 1);
        for (size_t j_1__ = 0; j_1__ < betas_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betas" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ui_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < ui_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ui" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sdnb";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bp";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "bn";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "anorm";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "apso";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ba";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "bd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        size_t betas_j_1_max__ = (K - 1);
        for (size_t j_1__ = 0; j_1__ < betas_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betas" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ui_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < ui_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ui" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sdnb";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bp";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "bn";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_paired_GT_nb_namespace::model_paired_GT_nb stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
